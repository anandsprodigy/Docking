#Bash does not have a type system, it can only save string values. Hence internally, Bash saves them as a string.

#In bash, * is a special character that represents a wildcard. When passed as an argument to a command, * contains all the files in the current directory as a list. 

#Bash script example

message="hello wold *";
echo $message;
echo "$message"

here in above case $message without quotes will show all files in current directory. When wild crard used in quotes, it will be taken as literal.

#using let command, We can perform arithmetic operations in Bash even though Bash does not support number data type. 

let RESULT=1+1
echo $RESULT
⥤ 2

OR 

let RESULT="1 + 1"
echo $RESULT
⥤ 2


#We can also use expr command to execute an expression which takes multiple arguments ( it concatenates them and executes it ). 
It does not have a problem like let to declare a variable but it will print the result by default, hence we need to use $(expression) syntax.

expr 1 + 1   # prints to the STDOUT
RESULT=$(expr 3 \* 3)
echo $RESULT
⥤ 2
⥤ 9

Using $((expression)) syntax, we can also perform arithmetic operations.

RESULT=$((1 + 1))
echo $RESULT
⥤ 2


#As we can see in the above example, if we do not want to store or print the result, we can drop $ and use ((expression)) syntax to perform and arithmetic operation.

NUM=5
(( NUM += NUM )) # 5 + 5 => 10
(( NUM++ )) # 6++ => 11
(( NUM = $NUM - 3)) # 11 - 3 => 8
echo $NUM
⥤ 8

#To generate a 16-bit random number, Bash provides a RANDOM global variable that prints a random number between 0 to 32767 every time we access it.

#https://itnext.io/bash-scripting-everything-you-need-to-know-about-bash-shell-programming-cd08595f2fba


#https://devhints.io/bash 

#https://openvim.com/
