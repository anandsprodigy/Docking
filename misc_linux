#Basic configuration settings 
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/getting-started-with-system-administration_configuring-basic-system-settings


Pretty host name
My Machine
Host name
mymachine
Real host name - fully qualified domain name (FQDN)
mymachine.idm.company.com

#get language locale for the machine

> locale

#get hostname

>hostname

#set date
 date –set=”Date_in_format(YYMMDD) Time_in_format(HH:MM)
 
 #how long system is up
 >uptime
 
 #zip files
 zip Files.zip Check.txt Test.txt Output.txt
 
 #unzip files
 unzip Files.zip
 
 
 #Convenient way to check if system is using systemd or sysvinit in BASH? 
 --> check ps aux and pid 1 will show the process.
 
 the init (initialization) process is the first process executed by the kernel at boot time. It has a process ID (PID) of 1, 
 it is executed in the background until the system is shut down.
 The init process starts all other processes, that is daemons, services and other background processes, 
 therefore, it is the mother of all other processes on the system.
 A process can start many other child processes on the system, but in the event that a parent process dies, 
 init becomes the parent of the orphan process.
 
 
 The need to replace init with something more perfect was felt from a long time and several alternatives were developed from time-to-time, some of which became distribution’s native init replacement, some of which are:

Upstart – A init replacement daemon implemented in Ubuntu GNU/Linux and designed to start process asynchronously.
Epoch – A init replacement daemon built around simplicity and service management, designed to start process single-threaded.
Mudar – A init replacement daemon written in Python, implemented on Pardus GNU/Linux and designed to start process asynchronously.
systemd – A init replacement daemon designed to start process in parallel, implemented in a number of standard distribution – Fedora, OpenSuSE, Arch, RHEL, CentOS, etc.


https://www.tecmint.com/systemd-replaces-init-in-linux/


#difference in files

diff simple.txt simple2.txt

#linux epoch time
The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds that have elapsed since January 1, 1970

#.bash_profile is executed for login shells, while .bashrc is executed for interactive non-login shells.

-rw-r--r-- 1 root root  220 Feb 25 17:33 .bash_logout
-rw-r--r-- 1 root root 3771 Feb 25 17:33 .bashrc
-rw-r--r-- 1 root root  807 Feb 25 17:33 .profile

Ubuntu files

Profile and bash_logout are execuated on login. bashrc executed when user opens terminal.

# The SKEL variable specifies the directory containing "skeletal" user
# files; in other words, files such as a sample .profile that will be
# copied to the new user's home directory when it is created.
# SKEL=/etc/skel

When you want to create any files/folders into user directory then copy files in /etc/skel

 ~/.profile

#curl - Transfers data from or to a server, using one of the protocols: 
HTTP, HTTPS, FTP, FTPS, SCP, SFTP, TFTP, DICT, TELNET, LDAP or FILE. (To transfer multiple files use wget or FTP.

#get webpage
curl http://www.tutorialspoint.com

#get webpage and headers
curl http://www.tutorialspoint.com -i


#wget
wget -O filename.zip http://www.domain.com/filename-4.0.1.zip

#wget ftp
wget --ftp-user=USERNAME --ftp-password=PASSWORD ftp://ftp.domain.com/filename.tar.gz

#Since there are many versions of Unix, it creates incomaptibility between them, to standardize Unix OS, IEEE created POSIX (Portable Operating System Interface)

Not all linux follows POSIX but most do adhere important principle.

#difference between Linux distros
http://www.unixguide.net/unixguide.shtml

#linux boot process
1) System Startup/BIOS
2) Stage1 Bootloader --> MBR
3) Stage2 Bootloader --> Grub/LILO
4) Kernel
5) init


1) BIOS check system and calls first bootloader MBR located on primary HDD
2) First stage bootloader call 2nd bootloader
3) Second stage bootloade called from /boot/
4) Kernel then loads mounts root partitions
5) Kernel hand over to boot process present at /sbin/init
6) /sbin/init loads all services and mount all partitions present at /etc/fstab
7) user login presented

#init program loads all services

>pstree
init─┬─cron
     ├─init───bash───pstree
     └─{init}
     
init config file present at /etc/initab

Run-level
0 halt
1 single user
2 multiple user no netwroking
3 multiple user with networking
4 user defined
5 full multi user + windows X system (GUI)
6 Reboot

#get kernel version
cat /proc/version

#apropos searches what is dictionary

#type gives type of the command
type uname
uname is /usr/bin/uname


#unix files types
1) Ordinary file
2) Directory/Folder denoted as d
3) link --> references to other files. denoted as l
4) named pipe --> files for interprocess communications. denoted as p e.g. who | wc -l
5) Socket --> used for interprocess communication. demoted as s
6) device file --> file represents hardware. character based devices are c and block devices are b


https://www.youtube.com/watch?v=3kVqW0k1p0A

vi
https://www.youtube.com/watch?v=HWMvsaiPwFk

vi
https://www.cs.colostate.edu/helpdocs/vi.html


#redirection

in 0
out 1
error 2

#redirect to both std out and err writen to single file
command &> out

command 1> file --> std out writen to file

command 2> file --> std err writen to file



#TEE

tee command copy text from STD in such as | and redirect to STDout and file


#change ownership of the user for file/directory
sudo chown linda simple2.txt


#longest line via wc
 wc -L demo
 
 #calender previous current and next month
  cal -3
  
 #calender this month
 cal
 
 #calender 
 cal 03 2007
 
 #calender
 cal -3 3 2007
 
 #cal full year
 cal 2018
 
#search if package is installed 
 sudo apt search openssh-server
 
 
 #generate SSH key
 ssh-keygen -A
OR
ssh-keygen -b 1024 -t rsa -f /etc/ssh/ssh_host_key
ssh-keygen -b 1024 -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -b 1024 -t dsa -f /etc/ssh/ssh_host_dsa_key
ssh-keygen -b 1024 -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key


#FQDN for hostname
hostname -f
somePC.localdomain

#hosts file
The /etc/hosts file provides a list of IP addresses with corresponding hostnames. This allows you to specify hostnames for an IP address in one place on the local machine, and then have multiple applications connect to external resources via their hostnames. The system of host files precedes DNS, and hosts files are always checked before DNS is queried. As a result, /etc/hosts can be useful for maintaining small “internal” networks, for development purposes, and for managing clusters.

198.51.100.30   example.com
192.168.1.1     stick.example.com

#check memory usage
 free -m
 
 Where m is MB.
 
               total        used        free      shared  buff/cache   available
Mem:           3948        3008         716          17         223         809
Swap:         12288         633       11654

System will retain cache untill any program needs space. then cache memory is deleted as when needed.

#send files to other server
scp [/path/to/local/file] [remote-username]@[remote-hostname]:[/path/to/remote/file]

scp /home/anand/simple.txt anand@hostname:/home/linda/
 
This command is available by default on OS X and Linux machines. You can use it to copy files to a Linode, as well as between remote servers. If you use SSH keys, you can use the scp command without entering a password for every transfer.

#list all packages
dpkg -l

||/ Name                         Version                      Description
+++-============================-============================-===============================
ii  adduser                      3.110                        add and remove users and groups
ii  apache2-mpm-itk              2.2.6-02-1+lenny2            multiuser MPM for Apache 2.2
ii  apache2-utils                2.2.9-10+lenny4              utility programs for webservers
ii  apache2.2-common             2.2.9-10+lenny4              Apache HTTP Server common files

#get info about package
 dpkg -l | grep curl
 
 OR
 
  apt-cache search jdk
 
 
 #search and replace
 sed -i `s/^good/BAD/` morning-star.txt
 
