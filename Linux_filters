#Linux Filters

Linux Filter commands accept input data from stdin (standard input) and produce output on stdout (standard output). It transforms plain-text data into a meaningful way and can be used with pipes to perform higher operations.

#https://www.javatpoint.com/linux-filters


uniq
wc
head 
tail
cat
tac
wc
sed
nl
sort
comm
tr
tee
gzip
od


#comparing the files

comm <file1> <file2>

First column displays non-matching items of first file 'file1.txt'

Second column displays non-matching items of second file 'file2.txt' 

Third column indicates matching items of both the files

comm -23 (To display first column)

comm -13 (To display second column)

comm -12 (To display third column)

Example:

comm -23 file1.txt file2.txt

comm -13 file1.txt file2.txt

comm -12 file1.txt file2.txt

#SED
Linux 'sed' command stands for stream editor. 

It is used to edit streams (files) using regular expressions. But this editing is not permanent. It remains only in display, but in actual, file content remains the same.

sed SCRIPT INPUTFILE...

sed [OPTION]... {script-only-if-no-other-script} [input-file]...  

#on STDIN
echo class7 | sed s/class/JTF/

#global replpacement
command | sed 's/<oldWord>/<newWord>/g'     

cat simple.txt | sed s/6//g

Replacing 6 number with nothing

#remove entire line with matching word
cat c.txt | sed /JTP/d 

here line with JTP will be removed. Also, notice there is no s in s/// (that is may be for substitution only) and d is used for line delete.

#add line numbers to file
sed '=' c.txt

#nl is also adding line numbers
nl c.txt

nl c.txt
     1  This is JTP
     2  Linux is simple
     3  Linux is good

: (label)
= (print line number)
a (append text lines)
b (branch)
c (change to text lines)
D (delete first line)
d (delete)
e (evaluate)
F (File name)
G (appending Get)
g (get)
H (append Hold)
h (hold)
i (insert text lines)
L (fLow paragraphs)
l (list unambiguously)
N (append Next line)
n (next-line)
P (print first line)
p (print)
q (quit)
Q (silent Quit)
r (read file)
R (read line)
s (substitute)
T (test and branch if failed)
t (test and branch if successful)
v (version)
w (write file)
W (write first line)
x (eXchange)
y (transliterate)
z (Zap)

#transformation
 sed y/sTeg/REWQ/ c.txt
 
 #modify line
 sed '3c\This is a modified line.' c.txt

using regex
sed '/This is/c Line updated.' c.txt

if line matches "This is" then line will be modifed.

https://www.javatpoint.com/linux-sed#Applying

#join

join <file1> <file2>

join will joins lines from 2 files and show it in STDOUT. There should a common element or word/column in order to join. Otherwise will get below error.

join: wine.txt:3: is not sorted:

file1
1 new delhi
2 Tokyo

file2
1 India
2 Japan
3 Australia

#Uniq

get uniq lines from the file

uniq <filename>

#uniq -c <filename>

provides number of occurances.

#print only duplicate entries

uniq -d <filename>

